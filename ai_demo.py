#!/usr/bin/env python3
"""
VitaPlan AI-Powered Multi-Agent System Demo
All responses generated by AI models - no manual rules
"""

from ai_agents import AIAgentManager
import json

def demo_ai_system():
    """Demonstrate the AI-powered multi-agent system"""
    print("ðŸ¤– VitaPlan AI-Powered Multi-Agent System Demo")
    print("=" * 60)
    print("All responses are generated by AI models using Google Gemini!")
    print("=" * 60)
    
    # Initialize the AI agent manager
    agent_manager = AIAgentManager()
    
    # Demo user ID
    user_id = "ai_demo_user_123"
    
    print("\n1. AI User Data Collection Agent")
    print("-" * 40)
    
    # Test AI data collection
    user_input = "Hi, I'm John, 30 years old, male. I have diabetes and I'm allergic to nuts and dairy."
    
    print(f"User: {user_input}")
    response = agent_manager.process_message(user_id, user_input, "auto")
    print(f"AI Agent: {response['message']}")
    
    print("\n2. AI Diet Planning Agent")
    print("-" * 40)
    
    # Get AI-generated diet plan
    print("User: Can you create a diet plan for me?")
    response = agent_manager.process_message(user_id, "Can you create a diet plan for me?", "auto")
    print(f"AI Agent: {response['message']}")
    
    if 'meal_plan' in response:
        print("\nAI-Generated Meal Plan:")
        for meal_type, items in response['meal_plan'].items():
            if items and meal_type != 'notes':
                print(f"\n{meal_type.title()}:")
                for item in items:
                    print(f"  â€¢ {item}")
    
    print("\n3. AI Feedback Collection Agent")
    print("-" * 40)
    
    # Test AI feedback analysis
    feedback = "The diet plan was good, but I found the portions too large. I couldn't finish the dinner portion. I loved the breakfast options though!"
    
    print(f"User: {feedback}")
    response = agent_manager.process_message(user_id, feedback, "auto")
    print(f"AI Agent: {response['message']}")
    
    print("\n4. AI Progress Summary")
    print("-" * 40)
    
    # Get AI-generated summary
    print("User: Can you give me a summary of my progress?")
    response = agent_manager.process_message(user_id, "Can you give me a summary of my progress?", "auto")
    print(f"AI Agent: {response['message']}")
    
    print("\n5. AI Conversation History")
    print("-" * 40)
    
    # Get conversation history
    history = agent_manager.get_conversation_history(user_id, 10)
    print(f"Total AI conversations: {len(history)}")
    
    for i, conv in enumerate(history[:5], 1):  # Show first 5 conversations
        print(f"{i}. [{conv['agent_name']}] {conv['message'][:100]}...")
    
    print("\nâœ… AI Demo completed successfully!")
    print("\nðŸŽ¯ Key Features:")
    print("â€¢ All responses generated by AI models")
    print("â€¢ No manual rules or hardcoded responses")
    print("â€¢ Uses Google Gemini AI (free)")
    print("â€¢ Learns and adapts from user feedback")
    print("â€¢ Fully conversational AI experience")
    
    print("\nTo run the full AI web application:")
    print("1. Run: python run.py")
    print("2. Open: http://localhost:5001")
    print("3. Chat with the AI agents!")

if __name__ == '__main__':
    demo_ai_system()
